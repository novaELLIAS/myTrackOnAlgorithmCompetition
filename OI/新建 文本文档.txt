#prag\
ma GCC optimize ("Ofast")

#include "stdio.h"
#include <vector>
#include <queue>

using namespace std;

inline int fastread ();
inline void fastwrite (int);
inline void fastwriteline (int);
inline void fastwritespace (int);

#define maxn 301
#define max(a,b) a>b? a:b
#define min(a,b) a<b? a:b

struct node
{
	int father;
	int deep;
	vector <int> child;
} data[maxn];
int n, p, u, v, maxdeep, fro;
vector <int> input[maxn];
queue <int> nico;

int main ()
{
	n = fastread ();
	p = fastread ();
	for (int i = 1; i <= n; i ++)
	{
		u = fastread ();
		v = fastread ();
		input[u].push_back (v);
		input[v].push_back (u);
	}

	nico.push (1);
	data[1].deep = 1;
	data[1].child.push_back (1); 
	
	while (!nico.empty ())
	{
		fro = nico.front ();
		nico.pop ();
		maxdeep = max (maxdeep, data[fro].deep);
		for (int i = 0; i < ; i ++)
	}
}

inline int fastread ()
{
	int sign = 1, n = 0;
	char c = getchar();
	while(c < '0' || c > '9')
	{
		if(c == '-') sign = -1;
		c = getchar();
	}
	while(c >= '0' && c <= '9')
	{
		n = n*10 + c-'0';
		c = getchar();
	}
	return sign*n;
}
inline void fastwrite (int x)
{
	if(x < 0) x = -x, putchar('-');
	if(x > 9) fastwrite(x / 10);
	putchar(x%10 + '0');
}
inline void fastwritespace (int x)
{
	fastwrite(x);
	putchar(' ');
}
inline void fastwriteline (int x)
{
	fastwrite(x);
	putchar('\n');
}